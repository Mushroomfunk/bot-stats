// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model UserProvider {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String   @unique
  apiKey     String
  passphrase String
  secretKey  String
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?  @db.Uuid
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model BotHistory {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  actualLever  Float    @default(0)
  arbitrageNum Int      @default(0)
  totalPnl     Float    @default(0)
  pnlRatio     Float    @default(0)
  gridProfit   Float    @default(0)
  floatProfit  Float    @default(0)
  liqPx        Float    @default(0)
  createdAt    DateTime @default(now())
  Bot          Bot?     @relation(fields: [botId], references: [id])
  botId        String?  @db.Uuid
}

model Bot {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  algoId      BigInt       @default(0)
  algoClOrdId Int          @default(0)
  instId      String
  state       BotState
  direction   String?
  maxPx       Float        @default(0)
  minPx       Float        @default(0)
  gridNum     Int          @default(0)
  runType     String
  investment  Float        @default(0)
  instFamily  String
  lever       Float        @default(0)
  basePos     Boolean      @default(false)
  history     BotHistory[]
  User        User?        @relation(fields: [userId], references: [id])
  userId      String?      @db.Uuid
}

model User {
  id       String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email    String         @unique
  name     String
  provider UserProvider[]
  bot      Bot[]
}

enum BotState {
  starting
  running
  stopped
  no_close_position
}

enum InstrumentType {
  SPOT
  MARGIN
  FUTURES
  SWAP
}
